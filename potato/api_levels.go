/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A LevelsApiController binds http requests to an api service and writes the service results to the http response
type LevelsApiController struct {
	service LevelsApiServicer
}

// NewLevelsApiController creates a default api controller
func NewLevelsApiController(s LevelsApiServicer) Router {
	return &LevelsApiController{service: s}
}

// Routes returns all of the api route for the LevelsApiController
func (c *LevelsApiController) Routes() Routes {
	return Routes{ 
		{
			"AddLevel",
			strings.ToUpper("Post"),
			"/levels/{levelName}",
			c.AddLevel,
		},
		{
			"EditLevel",
			strings.ToUpper("Patch"),
			"/levels/{levelName}",
			c.EditLevel,
		},
		{
			"GetLevel",
			strings.ToUpper("Get"),
			"/levels/{levelName}",
			c.GetLevel,
		},
		{
			"GetLevelList",
			strings.ToUpper("Get"),
			"/levels/list",
			c.GetLevelList,
		},
	}
}

// AddLevel - Add level
func (c *LevelsApiController) AddLevel(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	levelName := params["levelName"]
	
	level := &Level{}
	if err := json.NewDecoder(r.Body).Decode(&level); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.AddLevel(r.Context(), levelName, *level)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// EditLevel - Edit level
func (c *LevelsApiController) EditLevel(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	levelName := params["levelName"]
	
	level := &Level{}
	if err := json.NewDecoder(r.Body).Decode(&level); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.EditLevel(r.Context(), levelName, *level)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetLevel - Get level
func (c *LevelsApiController) GetLevel(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	levelName := params["levelName"]
	
	result, err := c.service.GetLevel(r.Context(), levelName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetLevelList - Get level list
func (c *LevelsApiController) GetLevelList(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetLevelList(r.Context(), localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"context"
	"encoding/json"
	"log"
	"net/http"

	"cloud.google.com/go/firestore"
	"github.com/PurplePalette/sonolus-uploader-core/utils/request"
	"gopkg.in/go-playground/validator.v9"
)

// EffectsApiService is a service that implents the logic for the EffectsApiServicer
// This service should implement the business logic for every endpoint for the EffectsApi API.
// Include any external packages or services that will be required by this service.
type EffectsApiService struct {
	firestore *firestore.Client
	cache     *CacheService
	validate  *validator.Validate
}

// NewEffectsApiService creates a default api service
func NewEffectsApiService(firestore *firestore.Client, cache *CacheService) EffectsApiServicer {
	return &EffectsApiService{firestore: firestore, cache: cache, validate: validator.New()}
}

// AddEffect - Add effect
func (s *EffectsApiService) AddEffect(ctx context.Context, effectName string, effect Effect) (ImplResponse, error) {
	if !request.IsLoggedIn(ctx) {
		return Response(http.StatusUnauthorized, nil), nil
	}
	if !request.IsValidName(effectName) {
		return Response(http.StatusBadRequest, nil), nil
	}
	if err := s.validate.Struct(effectName); err != nil {
		return Response(http.StatusBadRequest, nil), nil
	}
	if s.cache.effects.IsExist(effectName) {
		return Response(http.StatusConflict, nil), nil
	}
	// Force set parameter to valid
	userId, _ := request.GetUserId(ctx)
	effect.UserId = userId
	effect.Name = effectName
	col := s.firestore.Collection("effects")
	// Add effect to firestore
	if _, err := col.Doc(effectName).Set(ctx, effect); err != nil {
		log.Fatalln("Error posting effect:", err)
		return Response(500, nil), nil
	}
	// Add effect to cache
	s.cache.effects.Add(effectName, effect)
	return Response(200, nil), nil
}

// EditEffect - Edit effect
func (s *EffectsApiService) EditEffect(ctx context.Context, effectName string, effect Effect) (ImplResponse, error) {
	if !request.IsLoggedIn(ctx) {
		return Response(http.StatusUnauthorized, nil), nil
	}
	if !request.IsValidName(effectName) {
		return Response(http.StatusBadRequest, nil), nil
	}
	if err := s.validate.Struct(effectName); err != nil {
		return Response(http.StatusBadRequest, nil), nil
	}
	userId, _ := request.GetUserId(ctx)
	match, err := s.cache.effects.IsOwnerMatch(effectName, userId)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	if !match {
		return Response(http.StatusForbidden, nil), nil
	}
	// Update effect data in firestore
	col := s.firestore.Collection("effects")
	if _, err := col.Doc(effectName).Set(ctx, effect); err != nil {
		log.Fatalln("Error posting effect:", err)
		return Response(500, nil), nil
	}
	// Update effect data in cache
	s.cache.effects.Set(effectName, effect)
	return Response(200, nil), nil
}

// GetEffect - Get effect
func (s *EffectsApiService) GetEffect(ctx context.Context, effectName string) (ImplResponse, error) {
	ef, err := s.cache.effects.Get(effectName)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	resp := GetEffectResponse{
		Item:        ef.(Effect),
		Description: "",
		Recommended: []Effect{},
	}
	return Response(200, resp), nil
}

// GetEffectList - Get effect list
func (s *EffectsApiService) GetEffectList(ctx context.Context, localization string, page int32, keywords string) (ImplResponse, error) {
	query := request.ParseSearchQuery(keywords)
	pages := s.cache.effects.Pages()
	items, err := s.cache.effects.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var effects []Effect
	err = json.Unmarshal(items, &effects)
	if err != nil {
		return Response(500, nil), nil
	}
	resp := GetEffectListResponse{
		PageCount: pages,
		Items:     effects,
	}
	return Response(200, resp), nil
}

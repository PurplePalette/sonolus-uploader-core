/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"context"
	"encoding/json"
	"log"
	"net/http"

	"cloud.google.com/go/firestore"
	"github.com/PurplePalette/sonolus-uploader-core/utils/request"
)

// TestsApiService is a service that implents the logic for the TestsApiServicer
// This service should implement the business logic for every endpoint for the TestsApi API.
// Include any external packages or services that will be required by this service.
type TestsApiService struct {
	firestore *firestore.Client
	cache     *CacheService
}

// NewTestsApiService creates a default api service
func NewTestsApiService(firestore *firestore.Client, cache *CacheService) TestsApiServicer {
	return &TestsApiService{firestore: firestore, cache: cache}
}

// GetTestServerInfo - Get user server info
func (s *TestsApiService) GetTestServerInfo(ctx context.Context, testId string) (ImplResponse, error) {
	if _, err := s.cache.GetUserIdFromTest(testId); err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	welcome, err := s.cache.news.Get("sweetPotatoTestWelcome")
	parsedNews := welcome.(News)
	if err != nil {
		log.Print(err)
		return Response(http.StatusInternalServerError, nil), nil
	}
	parsedNews.Level.Artists = testId
	welcome2, err := s.cache.news.Get("sweetPotatoTestWelcome2")
	parsedNews2 := welcome2.(News)
	if err != nil {
		log.Print(err)
		return Response(http.StatusInternalServerError, nil), nil
	}
	resp := ServerInfo{
		Levels:      []Level{parsedNews.Level, parsedNews2.Level},
		Skins:       []Skin{},
		Backgrounds: []Background{},
		Effects:     []Effect{},
		Particles:   []Particle{},
		Engines:     []Engine{},
	}
	return Response(200, resp), nil
}

// GetTestsBackgrounds - Get backgrounds for test
func (s *TestsApiService) GetTestsBackgrounds(ctx context.Context, testId string, localization string, page int32, keywords string) (ImplResponse, error) {
	userId, err := s.cache.GetUserIdFromTest(testId)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	query := request.ParseSearchQuery(keywords)
	query.Filter.UserId = userId
	query.Filter.Public = false
	pages := s.cache.backgrounds.Pages()
	items, err := s.cache.backgrounds.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var backgrounds []Background
	if err := json.Unmarshal(items, &backgrounds); err != nil {
		return Response(500, nil), nil
	}
	resp := GetBackgroundListResponse{
		PageCount: pages,
		Items:     backgrounds,
	}
	return Response(200, resp), nil
}

// GetTestsEffects - Get effects for test
func (s *TestsApiService) GetTestsEffects(ctx context.Context, testId string, localization string, page int32, keywords string) (ImplResponse, error) {
	userId, err := s.cache.GetUserIdFromTest(testId)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	query := request.ParseSearchQuery(keywords)
	query.Filter.UserId = userId
	query.Filter.Public = false
	pages := s.cache.effects.Pages()
	items, err := s.cache.effects.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var effects []Effect
	if err := json.Unmarshal(items, &effects); err != nil {
		return Response(500, nil), nil
	}
	resp := GetEffectListResponse{
		PageCount: pages,
		Items:     effects,
	}
	return Response(200, resp), nil
}

// GetTestsEngines - Get engines for test
func (s *TestsApiService) GetTestsEngines(ctx context.Context, testId string, localization string, page int32, keywords string) (ImplResponse, error) {
	userId, err := s.cache.GetUserIdFromTest(testId)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	query := request.ParseSearchQuery(keywords)
	query.Filter.UserId = userId
	query.Filter.Public = false
	pages := s.cache.engines.Pages()
	items, err := s.cache.engines.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var engines []Engine
	if err := json.Unmarshal(items, &engines); err != nil {
		return Response(500, nil), nil
	}
	resp := GetEngineListResponse{
		PageCount: pages,
		Items:     engines,
	}
	return Response(200, resp), nil
}

// GetTestsLevels - Get levels for test
func (s *TestsApiService) GetTestsLevels(ctx context.Context, testId string, localization string, page int32, keywords string) (ImplResponse, error) {
	userId, err := s.cache.GetUserIdFromTest(testId)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	query := request.ParseSearchQuery(keywords)
	query.Filter.UserId = userId
	query.Filter.Public = false
	pages := s.cache.levels.Pages()
	items, err := s.cache.levels.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var levels []Level
	if err := json.Unmarshal(items, &levels); err != nil {
		return Response(500, nil), nil
	}
	resp := GetLevelListResponse{
		PageCount: pages,
		Items:     levels,
	}
	return Response(200, resp), nil
}

// GetTestsParticles - Get particles for test
func (s *TestsApiService) GetTestsParticles(ctx context.Context, testId string, localization string, page int32, keywords string) (ImplResponse, error) {
	userId, err := s.cache.GetUserIdFromTest(testId)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	query := request.ParseSearchQuery(keywords)
	query.Filter.UserId = userId
	query.Filter.Public = false
	pages := s.cache.particles.Pages()
	items, err := s.cache.particles.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var particles []Particle
	if err := json.Unmarshal(items, &particles); err != nil {
		return Response(500, nil), nil
	}
	resp := GetParticleListResponse{
		PageCount: pages,
		Items:     particles,
	}
	return Response(200, resp), nil
}

// GetTestsSkins - Get skins for test
func (s *TestsApiService) GetTestsSkins(ctx context.Context, testId string, localization string, page int32, keywords string) (ImplResponse, error) {
	userId, err := s.cache.GetUserIdFromTest(testId)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	query := request.ParseSearchQuery(keywords)
	query.Filter.UserId = userId
	query.Filter.Public = false
	pages := s.cache.skins.Pages()
	items, err := s.cache.skins.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var skins []Skin
	if err := json.Unmarshal(items, &skins); err != nil {
		return Response(500, nil), nil
	}
	resp := GetSkinListResponse{
		PageCount: pages,
		Items:     skins,
	}
	return Response(200, resp), nil
}

// GetBackgroundTest - Get testing background
func (s *TestsApiService) GetBackgroundTest(ctx context.Context, testId string, backgroundName string) (ImplResponse, error) {
	bg, err := s.cache.backgrounds.Get(backgroundName)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	parsedBg := bg.(Background)
	resp := GetBackgroundResponse{
		Item:        parsedBg,
		Description: parsedBg.Description,
		Recommended: []Background{},
	}
	return Response(200, resp), nil
}

// GetEffectTest - Get testing effect
func (s *TestsApiService) GetEffectTest(ctx context.Context, testId string, effectName string) (ImplResponse, error) {
	ef, err := s.cache.effects.Get(effectName)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	parsedEf := ef.(Effect)
	resp := GetEffectResponse{
		Item:        parsedEf,
		Description: parsedEf.Description,
		Recommended: []Effect{},
	}
	return Response(200, resp), nil
}

// GetEngineTest - Get testing engine
func (s *TestsApiService) GetEngineTest(ctx context.Context, testId string, engineName string) (ImplResponse, error) {
	eg, err := s.cache.engines.Get(engineName)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	parsedEg := eg.(Engine)
	resp := GetEngineResponse{
		Item:        parsedEg,
		Description: parsedEg.Description,
		Recommended: []Engine{},
	}
	return Response(200, resp), nil
}

// GetLevelTest - Get testing level
func (s *TestsApiService) GetLevelTest(ctx context.Context, testId string, levelName string) (ImplResponse, error) {
	rawNs, newsNotExistErr := s.cache.news.Get(levelName)
	rawLv, levelNotExistErr := s.cache.levels.Get(levelName)
	if newsNotExistErr != nil && levelNotExistErr != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	var lv Level
	if newsNotExistErr == nil {
		ns := rawNs.(News)
		lv = ns.Level
	} else {
		lv = rawLv.(Level)
	}
	resp := GetLevelResponse{
		Item:        lv,
		Description: lv.Description,
		Recommended: []Level{},
	}
	return Response(200, resp), nil
}

// GetParticleTest - Get testing particle
func (s *TestsApiService) GetParticleTest(ctx context.Context, testId string, particleName string) (ImplResponse, error) {
	rawPt, err := s.cache.particles.Get(particleName)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	pt := rawPt.(Particle)
	resp := GetParticleResponse{
		Item:        pt,
		Description: pt.Description,
		Recommended: []Particle{},
	}
	return Response(200, resp), nil
}

// GetSkinTest - Get testing skin
func (s *TestsApiService) GetSkinTest(ctx context.Context, testId string, skinName string) (ImplResponse, error) {
	rawSk, err := s.cache.skins.Get(skinName)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	sk := rawSk.(Skin)
	resp := GetSkinResponse{
		Item:        sk,
		Description: sk.Description,
		Recommended: []Skin{},
	}
	return Response(200, resp), nil
}

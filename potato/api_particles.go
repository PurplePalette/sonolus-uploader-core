/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A ParticlesAPIController binds http requests to an api service and writes the service results to the http response
type ParticlesAPIController struct {
	service ParticlesAPIServicer
}

// NewParticlesAPIController creates a default api controller
func NewParticlesAPIController(s ParticlesAPIServicer) Router {
	return &ParticlesAPIController{service: s}
}

// Routes returns all of the api route for the ParticlesAPIController
func (c *ParticlesAPIController) Routes() Routes {
	return Routes{
		{
			"AddParticle",
			strings.ToUpper("Post"),
			"/particles/{particleName}",
			c.AddParticle,
		},
		{
			"EditParticle",
			strings.ToUpper("Patch"),
			"/particles/{particleName}",
			c.EditParticle,
		},
		{
			"GetParticleList",
			strings.ToUpper("Get"),
			"/particles/list",
			c.GetParticleList,
		},
		{
			"GetParticle",
			strings.ToUpper("Get"),
			"/particles/{particleName}",
			c.GetParticle,
		},
	}
}

// AddParticle - Add particle
func (c *ParticlesAPIController) AddParticle(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	particleName := params["particleName"]

	particle := &Particle{}
	if err := json.NewDecoder(r.Body).Decode(&particle); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.AddParticle(r.Context(), particleName, *particle)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// EditParticle - Edit particle
func (c *ParticlesAPIController) EditParticle(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	particleName := params["particleName"]

	particle := &Particle{}
	if err := json.NewDecoder(r.Body).Decode(&particle); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.EditParticle(r.Context(), particleName, *particle)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetParticle - Get particle
func (c *ParticlesAPIController) GetParticle(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	particleName := params["particleName"]

	result, err := c.service.GetParticle(r.Context(), particleName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetParticleList - Get particle list
func (c *ParticlesAPIController) GetParticleList(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetParticleList(r.Context(), localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

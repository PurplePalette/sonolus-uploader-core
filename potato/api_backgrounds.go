/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A BackgroundsApiController binds http requests to an api service and writes the service results to the http response
type BackgroundsApiController struct {
	service BackgroundsApiServicer
}

// NewBackgroundsApiController creates a default api controller
func NewBackgroundsApiController(s BackgroundsApiServicer) Router {
	return &BackgroundsApiController{service: s}
}

// Routes returns all of the api route for the BackgroundsApiController
func (c *BackgroundsApiController) Routes() Routes {
	return Routes{
		{
			"AddBackground",
			strings.ToUpper("Post"),
			"/backgrounds/{backgroundName}",
			c.AddBackground,
		},
		{
			"EditBackground",
			strings.ToUpper("Patch"),
			"/backgrounds/{backgroundName}",
			c.EditBackground,
		},
		{
			"GetBackground",
			strings.ToUpper("Get"),
			"/backgrounds/{backgroundName}",
			c.GetBackground,
		},
		{
			"GetBackgroundList",
			strings.ToUpper("Get"),
			"/backgrounds/list",
			c.GetBackgroundList,
		},
	}
}

// AddBackground - Add background
func (c *BackgroundsApiController) AddBackground(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	backgroundName := params["backgroundName"]

	background := &Background{}
	if err := json.NewDecoder(r.Body).Decode(&background); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.AddBackground(r.Context(), backgroundName, *background)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// EditBackground - Edit background
func (c *BackgroundsApiController) EditBackground(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	backgroundName := params["backgroundName"]

	background := &Background{}
	if err := json.NewDecoder(r.Body).Decode(&background); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.EditBackground(r.Context(), backgroundName, *background)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetBackground - Get background
func (c *BackgroundsApiController) GetBackground(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	backgroundName := params["backgroundName"]

	result, err := c.service.GetBackground(r.Context(), backgroundName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetBackgroundList - Get background list
func (c *BackgroundsApiController) GetBackgroundList(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetBackgroundList(r.Context(), localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

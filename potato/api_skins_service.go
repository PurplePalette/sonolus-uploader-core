/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"context"
	"encoding/json"
	"log"
	"net/http"

	"cloud.google.com/go/firestore"
	"github.com/PurplePalette/sonolus-uploader-core/utils/request"
	"gopkg.in/go-playground/validator.v9"
)

// SkinsAPIService is a service that implents the logic for the SkinsAPIServicer
// This service should implement the business logic for every endpoint for the SkinsAPI API.
// Include any external packages or services that will be required by this service.
type SkinsAPIService struct {
	firestore *firestore.Client
	cache     *CacheService
	validate  *validator.Validate
}

// NewSkinsAPIService creates a default api service
func NewSkinsAPIService(firestore *firestore.Client, cache *CacheService) SkinsAPIServicer {
	return &SkinsAPIService{firestore: firestore, cache: cache, validate: validator.New()}
}

// AddSkin - Add skin
func (s *SkinsAPIService) AddSkin(ctx context.Context, skinName string, skin Skin) (ImplResponse, error) {
	if !request.IsValidName(skinName) {
		return Response(http.StatusBadRequest, nil), nil
	}
	if err := s.validate.Struct(skin); err != nil {
		return Response(http.StatusBadRequest, err.Error()), nil
	}
	if s.cache.skins.IsExist(skinName) {
		return Response(http.StatusConflict, nil), nil
	}
	// Force set parameter to valid
	userID, _ := request.GetUserID(ctx)
	skin.UserID = userID
	skin.Name = skinName
	col := s.firestore.Collection("skins")
	// Add skin to firestore
	if _, err := col.Doc(skinName).Set(ctx, skin); err != nil {
		log.Fatalln("Error posting skin:", err)
		return Response(500, nil), nil
	}
	// Add skin to cache
	s.cache.skins.Add(skinName, skin)
	return Response(200, nil), nil
}

// EditSkin - Edit skin
func (s *SkinsAPIService) EditSkin(ctx context.Context, skinName string, skin Skin) (ImplResponse, error) {
	if !request.IsValidName(skinName) {
		return Response(http.StatusBadRequest, nil), nil
	}
	if err := s.validate.Struct(skin); err != nil {
		return Response(http.StatusBadRequest, err.Error()), nil
	}
	userID, _ := request.GetUserID(ctx)
	match, err := s.cache.skins.IsOwnerMatch(skinName, userID)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	if !match {
		return Response(http.StatusForbidden, nil), nil
	}
	skin.Name = skinName
	// Update skin data in firestore
	col := s.firestore.Collection("skins")
	if _, err := col.Doc(skinName).Set(ctx, skin); err != nil {
		log.Fatalln("Error posting skin:", err)
		return Response(500, nil), nil
	}
	// Update skin data in cache
	s.cache.skins.Set(skinName, skin)
	return Response(200, nil), nil
}

// GetSkin - Get skin
func (s *SkinsAPIService) GetSkin(ctx context.Context, skinName string) (ImplResponse, error) {
	rawSk, err := s.cache.skins.Get(skinName)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	sk := rawSk.(Skin)
	resp := GetSkinResponse{
		Item:        sk,
		Description: sk.Description,
		Recommended: []Skin{},
	}
	return Response(200, resp), nil
}

// GetSkinList - Get skin list
func (s *SkinsAPIService) GetSkinList(ctx context.Context, localization string, page int32, keywords string) (ImplResponse, error) {
	query := request.ParseSearchQuery(keywords)
	pages := s.cache.skins.Pages()
	items, err := s.cache.skins.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var skins []Skin
	err = json.Unmarshal(items, &skins)
	if err != nil {
		return Response(500, nil), nil
	}
	resp := GetSkinListResponse{
		PageCount: pages,
		Items:     skins,
	}
	return Response(200, resp), nil
}

/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"encoding/json"
	"net/http"
	"strings"
)

// A InfoAPIController binds http requests to an api service and writes the service results to the http response
type InfoAPIController struct {
	service InfoAPIServicer
}

// NewInfoAPIController creates a default api controller
func NewInfoAPIController(s InfoAPIServicer) Router {
	return &InfoAPIController{service: s}
}

// Routes returns all of the api route for the InfoAPIController
func (c *InfoAPIController) Routes() Routes {
	return Routes{
		{
			"EditInfo",
			strings.ToUpper("Put"),
			"/info",
			c.EditInfo,
		},
		{
			"GetServerInfo",
			strings.ToUpper("Get"),
			"/info",
			c.GetServerInfo,
		},
	}
}

// EditInfo - Edit server info
func (c *InfoAPIController) EditInfo(w http.ResponseWriter, r *http.Request) {
	serverInfo := &ServerInfo{}
	if err := json.NewDecoder(r.Body).Decode(&serverInfo); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.EditInfo(r.Context(), *serverInfo)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetServerInfo - Get server info
func (c *InfoAPIController) GetServerInfo(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetServerInfo(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

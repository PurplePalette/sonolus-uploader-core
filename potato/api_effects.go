/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A EffectsAPIController binds http requests to an api service and writes the service results to the http response
type EffectsAPIController struct {
	service EffectsAPIServicer
}

// NewEffectsAPIController creates a default api controller
func NewEffectsAPIController(s EffectsAPIServicer) Router {
	return &EffectsAPIController{service: s}
}

// Routes returns all of the api route for the EffectsAPIController
func (c *EffectsAPIController) Routes() Routes {
	return Routes{
		{
			"AddEffect",
			strings.ToUpper("Post"),
			"/effects/{effectName}",
			c.AddEffect,
		},
		{
			"EditEffect",
			strings.ToUpper("Patch"),
			"/effects/{effectName}",
			c.EditEffect,
		},
		{
			"GetEffectList",
			strings.ToUpper("Get"),
			"/effects/list",
			c.GetEffectList,
		},
		{
			"GetEffect",
			strings.ToUpper("Get"),
			"/effects/{effectName}",
			c.GetEffect,
		},
	}
}

// AddEffect - Add effect
func (c *EffectsAPIController) AddEffect(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	effectName := params["effectName"]

	effect := &Effect{}
	if err := json.NewDecoder(r.Body).Decode(&effect); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.AddEffect(r.Context(), effectName, *effect)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// EditEffect - Edit effect
func (c *EffectsAPIController) EditEffect(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	effectName := params["effectName"]

	effect := &Effect{}
	if err := json.NewDecoder(r.Body).Decode(&effect); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.EditEffect(r.Context(), effectName, *effect)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEffect - Get effect
func (c *EffectsAPIController) GetEffect(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	effectName := params["effectName"]

	result, err := c.service.GetEffect(r.Context(), effectName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEffectList - Get effect list
func (c *EffectsAPIController) GetEffectList(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetEffectList(r.Context(), localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

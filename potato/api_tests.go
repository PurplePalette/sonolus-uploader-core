/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A TestsAPIController binds http requests to an api service and writes the service results to the http response
type TestsAPIController struct {
	service TestsAPIServicer
}

// NewTestsAPIController creates a default api controller
func NewTestsAPIController(s TestsAPIServicer) Router {
	return &TestsAPIController{service: s}
}

// Routes returns all of the api route for the TestsAPIController
func (c *TestsAPIController) Routes() Routes {
	return Routes{
		{
			"GetTestServerInfo",
			strings.ToUpper("Get"),
			"/tests/{testID}/info",
			c.GetTestServerInfo,
		},
		{
			"GetTestsBackgrounds",
			strings.ToUpper("Get"),
			"/tests/{testID}/backgrounds/list",
			c.GetTestsBackgrounds,
		},
		{
			"GetTestsEffects",
			strings.ToUpper("Get"),
			"/tests/{testID}/effects/list",
			c.GetTestsEffects,
		},
		{
			"GetTestsEngines",
			strings.ToUpper("Get"),
			"/tests/{testID}/engines/list",
			c.GetTestsEngines,
		},
		{
			"GetTestsLevels",
			strings.ToUpper("Get"),
			"/tests/{testID}/levels/list",
			c.GetTestsLevels,
		},
		{
			"GetTestsParticles",
			strings.ToUpper("Get"),
			"/tests/{testID}/particles/list",
			c.GetTestsParticles,
		},
		{
			"GetTestsSkins",
			strings.ToUpper("Get"),
			"/tests/{testID}/skins/list",
			c.GetTestsSkins,
		},
		{
			"GetBackgroundTest",
			strings.ToUpper("Get"),
			"/tests/{testID}/backgrounds/{backgroundName}",
			c.GetBackgroundTest,
		},
		{
			"GetEffectTest",
			strings.ToUpper("Get"),
			"/tests/{testID}/effects/{effectName}",
			c.GetEffectTest,
		},
		{
			"GetEngineTest",
			strings.ToUpper("Get"),
			"/tests/{testID}/engines/{engineName}",
			c.GetEngineTest,
		},
		{
			"GetLevelTest",
			strings.ToUpper("Get"),
			"/tests/{testID}/levels/{levelName}",
			c.GetLevelTest,
		},
		{
			"GetParticleTest",
			strings.ToUpper("Get"),
			"/tests/{testID}/particles/{particleName}",
			c.GetParticleTest,
		},
		{
			"GetSkinTest",
			strings.ToUpper("Get"),
			"/tests/{testID}/skins/{skinName}",
			c.GetSkinTest,
		},
	}
}

// GetTestServerInfo - Get user server info
func (c *TestsAPIController) GetTestServerInfo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testID := params["testId"]

	result, err := c.service.GetTestServerInfo(r.Context(), testID)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestsBackgrounds - Get backgrounds for test
func (c *TestsAPIController) GetTestsBackgrounds(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testID := params["testId"]

	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetTestsBackgrounds(r.Context(), testID, localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestsEffects - Get effects for test
func (c *TestsAPIController) GetTestsEffects(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testID := params["testId"]

	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetTestsEffects(r.Context(), testID, localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestsEngines - Get engines for test
func (c *TestsAPIController) GetTestsEngines(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testID := params["testId"]

	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetTestsEngines(r.Context(), testID, localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestsLevels - Get levels for test
func (c *TestsAPIController) GetTestsLevels(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testID := params["testId"]

	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetTestsLevels(r.Context(), testID, localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestsParticles - Get particles for test
func (c *TestsAPIController) GetTestsParticles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testID := params["testId"]

	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetTestsParticles(r.Context(), testID, localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestsSkins - Get skins for test
func (c *TestsAPIController) GetTestsSkins(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testID := params["testId"]

	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetTestsSkins(r.Context(), testID, localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetBackgroundTest - Get testing background
func (c *TestsAPIController) GetBackgroundTest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testID := params["testId"]

	backgroundName := params["backgroundName"]

	result, err := c.service.GetBackgroundTest(r.Context(), testID, backgroundName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEffectTest - Get testing effect
func (c *TestsAPIController) GetEffectTest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testID := params["testId"]

	effectName := params["effectName"]

	result, err := c.service.GetEffectTest(r.Context(), testID, effectName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEngineTest - Get testing engine
func (c *TestsAPIController) GetEngineTest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testID := params["testId"]

	engineName := params["engineName"]

	result, err := c.service.GetEngineTest(r.Context(), testID, engineName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetLevelTest - Get testing level
func (c *TestsAPIController) GetLevelTest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testID := params["testId"]

	levelName := params["levelName"]

	result, err := c.service.GetLevelTest(r.Context(), testID, levelName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetParticleTest - Get testing particle
func (c *TestsAPIController) GetParticleTest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testID := params["testId"]

	particleName := params["particleName"]

	result, err := c.service.GetParticleTest(r.Context(), testID, particleName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSkinTest - Get testing skin
func (c *TestsAPIController) GetSkinTest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testID := params["testId"]

	skinName := params["skinName"]

	result, err := c.service.GetSkinTest(r.Context(), testID, skinName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

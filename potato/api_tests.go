/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A TestsApiController binds http requests to an api service and writes the service results to the http response
type TestsApiController struct {
	service TestsApiServicer
}

// NewTestsApiController creates a default api controller
func NewTestsApiController(s TestsApiServicer) Router {
	return &TestsApiController{service: s}
}

// Routes returns all of the api route for the TestsApiController
func (c *TestsApiController) Routes() Routes {
	return Routes{ 
		{
			"GetTestServerInfo",
			strings.ToUpper("Get"),
			"/tests/{testId}/info",
			c.GetTestServerInfo,
		},
		{
			"GetTestsBackgrounds",
			strings.ToUpper("Get"),
			"/tests/{testId}/backgrounds/list",
			c.GetTestsBackgrounds,
		},
		{
			"GetTestsEffects",
			strings.ToUpper("Get"),
			"/tests/{testId}/effects/list",
			c.GetTestsEffects,
		},
		{
			"GetTestsEngines",
			strings.ToUpper("Get"),
			"/tests/{testId}/engines/list",
			c.GetTestsEngines,
		},
		{
			"GetTestsLevels",
			strings.ToUpper("Get"),
			"/tests/{testId}/levels/list",
			c.GetTestsLevels,
		},
		{
			"GetTestsParticles",
			strings.ToUpper("Get"),
			"/tests/{testId}/particles/list",
			c.GetTestsParticles,
		},
		{
			"GetTestsSkins",
			strings.ToUpper("Get"),
			"/tests/{testId}/skins/list",
			c.GetTestsSkins,
		},
	}
}

// GetTestServerInfo - Get user server info
func (c *TestsApiController) GetTestServerInfo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testId := params["testId"]
	
	result, err := c.service.GetTestServerInfo(r.Context(), testId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestsBackgrounds - Get backgrounds for test
func (c *TestsApiController) GetTestsBackgrounds(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testId := params["testId"]
	
	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetTestsBackgrounds(r.Context(), testId, localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestsEffects - Get effects for test
func (c *TestsApiController) GetTestsEffects(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testId := params["testId"]
	
	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetTestsEffects(r.Context(), testId, localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestsEngines - Get engines for test
func (c *TestsApiController) GetTestsEngines(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testId := params["testId"]
	
	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetTestsEngines(r.Context(), testId, localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestsLevels - Get levels for test
func (c *TestsApiController) GetTestsLevels(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testId := params["testId"]
	
	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetTestsLevels(r.Context(), testId, localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestsParticles - Get particles for test
func (c *TestsApiController) GetTestsParticles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testId := params["testId"]
	
	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetTestsParticles(r.Context(), testId, localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestsSkins - Get skins for test
func (c *TestsApiController) GetTestsSkins(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testId := params["testId"]
	
	localization := query.Get("localization")
	page, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	keywords := query.Get("keywords")
	result, err := c.service.GetTestsSkins(r.Context(), testId, localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

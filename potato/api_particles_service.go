/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"context"
	"encoding/json"
	"log"
	"net/http"

	"cloud.google.com/go/firestore"
	"github.com/PurplePalette/sonolus-uploader-core/utils/request"
	"gopkg.in/go-playground/validator.v9"
)

// ParticlesAPIService is a service that implents the logic for the ParticlesAPIServicer
// This service should implement the business logic for every endpoint for the ParticlesAPI API.
// Include any external packages or services that will be required by this service.
type ParticlesAPIService struct {
	firestore *firestore.Client
	cache     *CacheService
	validate  *validator.Validate
}

// NewParticlesAPIService creates a default api service
func NewParticlesAPIService(firestore *firestore.Client, cache *CacheService) ParticlesAPIServicer {
	return &ParticlesAPIService{firestore: firestore, cache: cache, validate: validator.New()}
}

// AddParticle - Add particle
func (s *ParticlesAPIService) AddParticle(ctx context.Context, particleName string, particle Particle) (ImplResponse, error) {
	if !request.IsValidName(particleName) {
		return Response(http.StatusBadRequest, nil), nil
	}
	if err := s.validate.Struct(particle); err != nil {
		return Response(http.StatusBadRequest, err.Error()), nil
	}
	if s.cache.particles.IsExist(particleName) {
		return Response(http.StatusConflict, nil), nil
	}
	// Force set parameter to valid
	userId, _ := request.GetUserId(ctx)
	particle.UserId = userId
	particle.Name = particleName
	col := s.firestore.Collection("particles")
	// Add particle to firestore
	if _, err := col.Doc(particleName).Set(ctx, particle); err != nil {
		log.Fatalln("Error posting particle:", err)
		return Response(500, nil), nil
	}
	// Add particle to cache
	s.cache.particles.Add(particleName, particle)
	return Response(200, nil), nil
}

// EditParticle - Edit particle
func (s *ParticlesAPIService) EditParticle(ctx context.Context, particleName string, particle Particle) (ImplResponse, error) {
	if !request.IsValidName(particleName) {
		return Response(http.StatusBadRequest, nil), nil
	}
	if err := s.validate.Struct(particle); err != nil {
		return Response(http.StatusBadRequest, err.Error()), nil
	}
	userId, _ := request.GetUserId(ctx)
	match, err := s.cache.particles.IsOwnerMatch(particleName, userId)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	if !match {
		return Response(http.StatusForbidden, nil), nil
	}
	particle.Name = particleName
	// Update particle data in firestore
	col := s.firestore.Collection("particles")
	if _, err := col.Doc(particleName).Set(ctx, particle); err != nil {
		log.Fatalln("Error posting particle:", err)
		return Response(500, nil), nil
	}
	// Update particle data in cache
	s.cache.particles.Set(particleName, particle)
	return Response(200, nil), nil
}

// GetParticle - Get particle
func (s *ParticlesAPIService) GetParticle(ctx context.Context, particleName string) (ImplResponse, error) {
	rawPt, err := s.cache.particles.Get(particleName)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	pt := rawPt.(Particle)
	resp := GetParticleResponse{
		Item:        pt,
		Description: pt.Description,
		Recommended: []Particle{},
	}
	return Response(200, resp), nil
}

// GetParticleList - Get particle list
func (s *ParticlesAPIService) GetParticleList(ctx context.Context, localization string, page int32, keywords string) (ImplResponse, error) {
	query := request.ParseSearchQuery(keywords)
	pages := s.cache.particles.Pages()
	items, err := s.cache.particles.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var particles []Particle
	err = json.Unmarshal(items, &particles)
	if err != nil {
		return Response(500, nil), nil
	}
	resp := GetParticleListResponse{
		PageCount: pages,
		Items:     particles,
	}
	return Response(200, resp), nil
}

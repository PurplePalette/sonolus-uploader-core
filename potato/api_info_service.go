/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"context"
	"errors"
	"log"
	"net/http"

	"cloud.google.com/go/firestore"
)

// InfoApiService is a service that implents the logic for the InfoApiServicer
// This service should implement the business logic for every endpoint for the InfoApi API.
// Include any external packages or services that will be required by this service.
type InfoApiService struct {
	firestore *firestore.Client
	cache     *CacheService
}

// NewInfoApiService creates a default api service
func NewInfoApiService(firestore *firestore.Client, cache *CacheService) InfoApiServicer {
	return &InfoApiService{firestore: firestore, cache: cache}
}

// EditInfo - Edit server info
func (s *InfoApiService) EditInfo(ctx context.Context, serverInfo ServerInfo) (ImplResponse, error) {
	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	//return Response(401, nil),nil

	//TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	//return Response(403, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("EditInfo method not implemented")
}

// GetServerInfo - Get server info
func (s *InfoApiService) GetServerInfo(ctx context.Context) (ImplResponse, error) {
	welcome, err := s.cache.news.Get("sweetPotatoWelcome")
	parsedNews := welcome.(News)
	if err != nil {
		log.Print(err)
		return Response(http.StatusInternalServerError, nil), nil
	}
	resp := ServerInfo{
		Levels:      []Level{parsedNews.Level},
		Skins:       []Skin{},
		Backgrounds: []Background{},
		Effects:     []Effect{},
		Particles:   []Particle{},
		Engines:     []Engine{},
	}
	return Response(200, resp), nil
}

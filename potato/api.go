/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"context"
	"net/http"
)

// BackgroundsAPIRouter defines the required methods for binding the api requests to a responses for the BackgroundsAPI
// The BackgroundsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a BackgroundsAPIServicer to perform the required actions, then write the service results to the http response.
type BackgroundsAPIRouter interface {
	AddBackground(http.ResponseWriter, *http.Request)
	EditBackground(http.ResponseWriter, *http.Request)
	GetBackground(http.ResponseWriter, *http.Request)
	GetBackgroundList(http.ResponseWriter, *http.Request)
}

// EffectsAPIRouter defines the required methods for binding the api requests to a responses for the EffectsAPI
// The EffectsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EffectsAPIServicer to perform the required actions, then write the service results to the http response.
type EffectsAPIRouter interface {
	AddEffect(http.ResponseWriter, *http.Request)
	EditEffect(http.ResponseWriter, *http.Request)
	GetEffect(http.ResponseWriter, *http.Request)
	GetEffectList(http.ResponseWriter, *http.Request)
}

// EnginesAPIRouter defines the required methods for binding the api requests to a responses for the EnginesAPI
// The EnginesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EnginesAPIServicer to perform the required actions, then write the service results to the http response.
type EnginesAPIRouter interface {
	AddEngine(http.ResponseWriter, *http.Request)
	EditEngine(http.ResponseWriter, *http.Request)
	GetEngine(http.ResponseWriter, *http.Request)
	GetEngineList(http.ResponseWriter, *http.Request)
}

// InfoAPIRouter defines the required methods for binding the api requests to a responses for the InfoAPI
// The InfoAPIRouter implementation should parse necessary information from the http request,
// pass the data to a InfoAPIServicer to perform the required actions, then write the service results to the http response.
type InfoAPIRouter interface {
	EditInfo(http.ResponseWriter, *http.Request)
	GetServerInfo(http.ResponseWriter, *http.Request)
}

// LevelsAPIRouter defines the required methods for binding the api requests to a responses for the LevelsAPI
// The LevelsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a LevelsAPIServicer to perform the required actions, then write the service results to the http response.
type LevelsAPIRouter interface {
	AddLevel(http.ResponseWriter, *http.Request)
	EditLevel(http.ResponseWriter, *http.Request)
	GetLevel(http.ResponseWriter, *http.Request)
	GetLevelList(http.ResponseWriter, *http.Request)
}

// ParticlesAPIRouter defines the required methods for binding the api requests to a responses for the ParticlesAPI
// The ParticlesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ParticlesAPIServicer to perform the required actions, then write the service results to the http response.
type ParticlesAPIRouter interface {
	AddParticle(http.ResponseWriter, *http.Request)
	GetParticle(http.ResponseWriter, *http.Request)
	GetParticleList(http.ResponseWriter, *http.Request)
	PatchParticlesParticleName(http.ResponseWriter, *http.Request)
}

// SkinsAPIRouter defines the required methods for binding the api requests to a responses for the SkinsAPI
// The SkinsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SkinsAPIServicer to perform the required actions, then write the service results to the http response.
type SkinsAPIRouter interface {
	AddSkin(http.ResponseWriter, *http.Request)
	EditSkin(http.ResponseWriter, *http.Request)
	GetSkin(http.ResponseWriter, *http.Request)
	GetSkinList(http.ResponseWriter, *http.Request)
}

// TestsAPIRouter defines the required methods for binding the api requests to a responses for the TestsAPI
// The TestsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TestsAPIServicer to perform the required actions, then write the service results to the http response.
type TestsAPIRouter interface {
	GetTestServerInfo(http.ResponseWriter, *http.Request)
	GetTestsBackgrounds(http.ResponseWriter, *http.Request)
	GetTestsEffects(http.ResponseWriter, *http.Request)
	GetTestsEngines(http.ResponseWriter, *http.Request)
	GetTestsLevels(http.ResponseWriter, *http.Request)
	GetTestsParticles(http.ResponseWriter, *http.Request)
	GetTestsSkins(http.ResponseWriter, *http.Request)
	GetBackgroundTest(http.ResponseWriter, *http.Request)
	GetEffectTest(http.ResponseWriter, *http.Request)
	GetEngineTest(http.ResponseWriter, *http.Request)
	GetLevelTest(http.ResponseWriter, *http.Request)
	GetParticleTest(http.ResponseWriter, *http.Request)
	GetSkinTest(http.ResponseWriter, *http.Request)
}

// UsersAPIRouter defines the required methods for binding the api requests to a responses for the UsersAPI
// The UsersAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UsersAPIServicer to perform the required actions, then write the service results to the http response.
type UsersAPIRouter interface {
	EditUser(http.ResponseWriter, *http.Request)
	GetUser(http.ResponseWriter, *http.Request)
	GetUserList(http.ResponseWriter, *http.Request)
	GetUserServerInfo(http.ResponseWriter, *http.Request)
	GetUsersBackgrounds(http.ResponseWriter, *http.Request)
	GetUsersEffects(http.ResponseWriter, *http.Request)
	GetUsersEngines(http.ResponseWriter, *http.Request)
	GetUsersLevels(http.ResponseWriter, *http.Request)
	GetUsersParticles(http.ResponseWriter, *http.Request)
	GetUsersSkins(http.ResponseWriter, *http.Request)
	GetUsersBackground(http.ResponseWriter, *http.Request)
	GetUsersEffect(http.ResponseWriter, *http.Request)
	GetUsersEngine(http.ResponseWriter, *http.Request)
	GetUsersLevel(http.ResponseWriter, *http.Request)
	GetUsersParticle(http.ResponseWriter, *http.Request)
	GetUsersSkin(http.ResponseWriter, *http.Request)
}

// BackgroundsAPIServicer defines the api actions for the BackgroundsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BackgroundsAPIServicer interface {
	AddBackground(context.Context, string, Background) (ImplResponse, error)
	EditBackground(context.Context, string, Background) (ImplResponse, error)
	GetBackground(context.Context, string) (ImplResponse, error)
	GetBackgroundList(context.Context, string, int32, string) (ImplResponse, error)
}

// EffectsAPIServicer defines the api actions for the EffectsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EffectsAPIServicer interface {
	AddEffect(context.Context, string, Effect) (ImplResponse, error)
	EditEffect(context.Context, string, Effect) (ImplResponse, error)
	GetEffect(context.Context, string) (ImplResponse, error)
	GetEffectList(context.Context, string, int32, string) (ImplResponse, error)
}

// EnginesAPIServicer defines the api actions for the EnginesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EnginesAPIServicer interface {
	AddEngine(context.Context, string, Engine) (ImplResponse, error)
	EditEngine(context.Context, string, Engine) (ImplResponse, error)
	GetEngine(context.Context, string) (ImplResponse, error)
	GetEngineList(context.Context, string, int32, string) (ImplResponse, error)
}

// InfoAPIServicer defines the api actions for the InfoAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type InfoAPIServicer interface {
	EditInfo(context.Context, ServerInfo) (ImplResponse, error)
	GetServerInfo(context.Context) (ImplResponse, error)
}

// LevelsAPIServicer defines the api actions for the LevelsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LevelsAPIServicer interface {
	AddLevel(context.Context, string, Level) (ImplResponse, error)
	EditLevel(context.Context, string, Level) (ImplResponse, error)
	GetLevel(context.Context, string) (ImplResponse, error)
	GetLevelList(context.Context, string, int32, string) (ImplResponse, error)
}

// ParticlesAPIServicer defines the api actions for the ParticlesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ParticlesAPIServicer interface {
	AddParticle(context.Context, string, Particle) (ImplResponse, error)
	EditParticle(context.Context, string, Particle) (ImplResponse, error)
	GetParticle(context.Context, string) (ImplResponse, error)
	GetParticleList(context.Context, string, int32, string) (ImplResponse, error)
}

// SkinsAPIServicer defines the api actions for the SkinsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SkinsAPIServicer interface {
	AddSkin(context.Context, string, Skin) (ImplResponse, error)
	EditSkin(context.Context, string, Skin) (ImplResponse, error)
	GetSkin(context.Context, string) (ImplResponse, error)
	GetSkinList(context.Context, string, int32, string) (ImplResponse, error)
}

// TestsAPIServicer defines the api actions for the TestsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TestsAPIServicer interface {
	GetTestServerInfo(context.Context, string) (ImplResponse, error)
	GetTestsBackgrounds(context.Context, string, string, int32, string) (ImplResponse, error)
	GetTestsEffects(context.Context, string, string, int32, string) (ImplResponse, error)
	GetTestsEngines(context.Context, string, string, int32, string) (ImplResponse, error)
	GetTestsLevels(context.Context, string, string, int32, string) (ImplResponse, error)
	GetTestsParticles(context.Context, string, string, int32, string) (ImplResponse, error)
	GetTestsSkins(context.Context, string, string, int32, string) (ImplResponse, error)
	GetBackgroundTest(context.Context, string, string) (ImplResponse, error)
	GetEffectTest(context.Context, string, string) (ImplResponse, error)
	GetEngineTest(context.Context, string, string) (ImplResponse, error)
	GetLevelTest(context.Context, string, string) (ImplResponse, error)
	GetParticleTest(context.Context, string, string) (ImplResponse, error)
	GetSkinTest(context.Context, string, string) (ImplResponse, error)
}

// UsersAPIServicer defines the api actions for the UsersAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UsersAPIServicer interface {
	EditUser(context.Context, string, User) (ImplResponse, error)
	GetUser(context.Context, string) (ImplResponse, error)
	GetUserList(context.Context) (ImplResponse, error)
	GetUserServerInfo(context.Context, string) (ImplResponse, error)
	GetUsersBackgrounds(context.Context, string, string, int32, string) (ImplResponse, error)
	GetUsersEffects(context.Context, string, string, int32, string) (ImplResponse, error)
	GetUsersEngines(context.Context, string, string, int32, string) (ImplResponse, error)
	GetUsersLevels(context.Context, string, string, int32, string) (ImplResponse, error)
	GetUsersParticles(context.Context, string, string, int32, string) (ImplResponse, error)
	GetUsersSkins(context.Context, string, string, int32, string) (ImplResponse, error)
	GetUsersBackground(context.Context, string, string) (ImplResponse, error)
	GetUsersEffect(context.Context, string, string) (ImplResponse, error)
	GetUsersEngine(context.Context, string, string) (ImplResponse, error)
	GetUsersLevel(context.Context, string, string) (ImplResponse, error)
	GetUsersParticle(context.Context, string, string) (ImplResponse, error)
	GetUsersSkin(context.Context, string, string) (ImplResponse, error)
}

/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package potato

import (
	"context"
	"encoding/json"
	"errors"
	"log"
	"net/http"

	"cloud.google.com/go/firestore"
	"github.com/PurplePalette/sonolus-uploader-core/utils/request"
)

// UsersApiService is a service that implents the logic for the UsersApiServicer
// This service should implement the business logic for every endpoint for the UsersApi API.
// Include any external packages or services that will be required by this service.
type UsersApiService struct {
	firestore *firestore.Client
	cache     *CacheService
}

// NewUsersApiService creates a default api service
func NewUsersApiService(firestore *firestore.Client, cache *CacheService) UsersApiServicer {
	return &UsersApiService{firestore: firestore, cache: cache}
}

// EditUser - Edit user
func (s *UsersApiService) EditUser(ctx context.Context, userId string, user User) (ImplResponse, error) {
	if !request.IsLoggedIn(ctx) {
		return Response(http.StatusUnauthorized, nil), nil
	}

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	//return Response(401, nil),nil

	//TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	//return Response(403, nil),nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("EditUser method not implemented")
}

// GetUser - Get user
func (s *UsersApiService) GetUser(ctx context.Context, userId string) (ImplResponse, error) {
	rawUser, err := s.cache.users.Get(userId)
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	user := rawUser.(User)
	return Response(200, user), nil
}

// GetUserList - Get user list
func (s *UsersApiService) GetUserList(ctx context.Context) (ImplResponse, error) {
	// TODO - update GetUserList with the required logic for this service method.
	// Add api_users_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, GetUserListResponse{}) or use other options such as http.Ok ...
	//return Response(200, GetUserListResponse{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetUserList method not implemented")
}

// GetUserServerInfo - Get user server info
func (s *UsersApiService) GetUserServerInfo(ctx context.Context, userId string) (ImplResponse, error) {
	if !s.cache.users.IsExist(userId) {
		return Response(http.StatusNotFound, nil), nil
	}
	welcome, err := s.cache.news.Get("sweetPotatoUserWelcome")
	parsedNews := welcome.(News)
	if err != nil {
		log.Print(err)
		return Response(http.StatusInternalServerError, nil), nil
	}
	parsedNews.Level.Artists = userId
	resp := ServerInfo{
		Levels:      []Level{parsedNews.Level},
		Skins:       []Skin{},
		Backgrounds: []Background{},
		Effects:     []Effect{},
		Particles:   []Particle{},
		Engines:     []Engine{},
	}

	return Response(200, resp), nil
}

// GetUsersBackgrounds - Get backgrounds for test
func (s *UsersApiService) GetUsersBackgrounds(ctx context.Context, userId string, localization string, page int32, keywords string) (ImplResponse, error) {
	query := request.ParseSearchQuery(keywords)
	query.Filter.UserId = userId
	pages := s.cache.backgrounds.Pages()
	items, err := s.cache.backgrounds.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var backgrounds []Background
	if err := json.Unmarshal(items, &backgrounds); err != nil {
		return Response(500, nil), nil
	}
	resp := GetBackgroundListResponse{
		PageCount: pages,
		Items:     backgrounds,
	}
	return Response(200, resp), nil
}

// GetUsersEffects - Get effects for test
func (s *UsersApiService) GetUsersEffects(ctx context.Context, userId string, localization string, page int32, keywords string) (ImplResponse, error) {
	query := request.ParseSearchQuery(keywords)
	query.Filter.UserId = userId
	pages := s.cache.effects.Pages()
	items, err := s.cache.effects.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var effects []Effect
	if err := json.Unmarshal(items, &effects); err != nil {
		return Response(500, nil), nil
	}
	resp := GetEffectListResponse{
		PageCount: pages,
		Items:     effects,
	}
	return Response(200, resp), nil
}

// GetUsersEngines - Get engines for test
func (s *UsersApiService) GetUsersEngines(ctx context.Context, userId string, localization string, page int32, keywords string) (ImplResponse, error) {
	query := request.ParseSearchQuery(keywords)
	query.Filter.UserId = userId
	pages := s.cache.engines.Pages()
	items, err := s.cache.engines.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var engines []Engine
	if err := json.Unmarshal(items, &engines); err != nil {
		return Response(500, nil), nil
	}
	resp := GetEngineListResponse{
		PageCount: pages,
		Items:     engines,
	}
	return Response(200, resp), nil
}

// GetUsersLevels - Get levels for test
func (s *UsersApiService) GetUsersLevels(ctx context.Context, userId string, localization string, page int32, keywords string) (ImplResponse, error) {
	query := request.ParseSearchQuery(keywords)
	query.Filter.UserId = userId
	pages := s.cache.levels.Pages()
	items, err := s.cache.levels.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var levels []Level
	if err := json.Unmarshal(items, &levels); err != nil {
		return Response(500, nil), nil
	}
	resp := GetLevelListResponse{
		PageCount: pages,
		Items:     levels,
	}
	return Response(200, resp), nil
}

// GetUsersParticles - Get particles for test
func (s *UsersApiService) GetUsersParticles(ctx context.Context, userId string, localization string, page int32, keywords string) (ImplResponse, error) {
	query := request.ParseSearchQuery(keywords)
	query.Filter.UserId = userId
	pages := s.cache.particles.Pages()
	items, err := s.cache.particles.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var particles []Particle
	if err := json.Unmarshal(items, &particles); err != nil {
		return Response(500, nil), nil
	}
	resp := GetParticleListResponse{
		PageCount: pages,
		Items:     particles,
	}
	return Response(200, resp), nil
}

// GetUsersSkins - Get skins for test
func (s *UsersApiService) GetUsersSkins(ctx context.Context, userId string, localization string, page int32, keywords string) (ImplResponse, error) {
	query := request.ParseSearchQuery(keywords)
	query.Filter.UserId = userId
	pages := s.cache.skins.Pages()
	items, err := s.cache.skins.GetPage(page, query)
	if err != nil {
		log.Fatal(err)
		return Response(500, nil), nil
	}
	var skins []Skin
	if err := json.Unmarshal(items, &skins); err != nil {
		return Response(500, nil), nil
	}
	resp := GetSkinListResponse{
		PageCount: pages,
		Items:     skins,
	}
	return Response(200, resp), nil
}

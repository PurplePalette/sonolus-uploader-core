/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package gen

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A EnginesApiController binds http requests to an api service and writes the service results to the http response
type EnginesApiController struct {
	service EnginesApiServicer
}

// NewEnginesApiController creates a default api controller
func NewEnginesApiController(s EnginesApiServicer) Router {
	return &EnginesApiController{service: s}
}

// Routes returns all of the api route for the EnginesApiController
func (c *EnginesApiController) Routes() Routes {
	return Routes{ 
		{
			"AddEngine",
			strings.ToUpper("Post"),
			"/engines/{engineName}",
			c.AddEngine,
		},
		{
			"EditEngine",
			strings.ToUpper("Patch"),
			"/engines/{engineName}",
			c.EditEngine,
		},
		{
			"GetEngine",
			strings.ToUpper("Get"),
			"/engines/{engineName}",
			c.GetEngine,
		},
		{
			"GetEngineList",
			strings.ToUpper("Get"),
			"/engines/list",
			c.GetEngineList,
		},
	}
}

// AddEngine - Add engine
func (c *EnginesApiController) AddEngine(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	engineName := params["engineName"]
	
	engine := &Engine{}
	if err := json.NewDecoder(r.Body).Decode(&engine); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.AddEngine(r.Context(), engineName, *engine)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// EditEngine - Edit engine
func (c *EnginesApiController) EditEngine(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	engineName := params["engineName"]
	
	engine := &Engine{}
	if err := json.NewDecoder(r.Body).Decode(&engine); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.EditEngine(r.Context(), engineName, *engine)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEngine - Get engine
func (c *EnginesApiController) GetEngine(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	engineName := params["engineName"]
	
	result, err := c.service.GetEngine(r.Context(), engineName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEngineList - Get engine list
func (c *EnginesApiController) GetEngineList(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	localization := query.Get("localization")
	page := query.Get("page")
	keywords := query.Get("keywords")
	result, err := c.service.GetEngineList(r.Context(), localization, page, keywords)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

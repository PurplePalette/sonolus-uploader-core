/*
 * SweetPotato Server API
 *
 * Sonolusの基本APIを拡張する感じ。 ユーザー認証はFirebaseAuthorizationを通してやる。
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"log"
	"net/http"

	potato "github.com/PurplePalette/sonolus-uploader-core/potato"
	"github.com/PurplePalette/sonolus-uploader-core/utils/server"
)

func main() {
	firebase := server.NewFirebaseClient()
	firestore := server.NewFirebaseFirestoreClient(firebase)
	auth := server.NewFirebaseAuthorizationClient(firebase)
	cache := potato.NewCacheService(firestore)
	if err := cache.InitCache(); err != nil {
		panic(err)
	}

	BackgroundsApiService := potato.NewBackgroundsApiService(firestore, cache)
	BackgroundsApiController := potato.NewBackgroundsApiController(BackgroundsApiService)

	EffectsApiService := potato.NewEffectsApiService(firestore, cache)
	EffectsApiController := potato.NewEffectsApiController(EffectsApiService)

	EnginesApiService := potato.NewEnginesApiService(firestore, cache)
	EnginesApiController := potato.NewEnginesApiController(EnginesApiService)

	InfoApiService := potato.NewInfoApiService(firestore, cache)
	InfoApiController := potato.NewInfoApiController(InfoApiService)

	LevelsApiService := potato.NewLevelsApiService(firestore, cache)
	LevelsApiController := potato.NewLevelsApiController(LevelsApiService)

	ParticlesApiService := potato.NewParticlesApiService(firestore, cache)
	ParticlesApiController := potato.NewParticlesApiController(ParticlesApiService)

	SkinsApiService := potato.NewSkinsApiService(firestore, cache)
	SkinsApiController := potato.NewSkinsApiController(SkinsApiService)

	TestsApiService := potato.NewTestsApiService(firestore, cache)
	TestsApiController := potato.NewTestsApiController(TestsApiService)

	UsersApiService := potato.NewUsersApiService(firestore, cache)
	UsersApiController := potato.NewUsersApiController(UsersApiService)

	router := server.NewRouterWithInject(
		auth,
		BackgroundsApiController,
		EffectsApiController,
		EnginesApiController,
		InfoApiController,
		LevelsApiController,
		ParticlesApiController,
		SkinsApiController,
		TestsApiController,
		UsersApiController,
	)
	log.Printf("Server started")
	log.Fatal(http.ListenAndServe(":8080", router))
}
